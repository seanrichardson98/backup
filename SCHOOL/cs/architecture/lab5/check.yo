                            | # begin execution at address zero
0x000:                      |         .pos    0
0x000: 30f4f80f000000000000 |         irmovq  stack, %rsp     # set stack to 0xFF8, grow to lower addresses
0x00a: 804800000000000000   |         call    main            # start main
0x013: 00                   |         halt                    # done
                            | 
0x018:                      |         .align  8
0x018:                      | count:
0x018: 0500000000000000     |         .quad   0x05
0x020:                      | array:
0x020: 0100000000000000     |         .quad   0x01
0x028: 0300000000000000     |         .quad   0x03
0x030: 0400000000000000     |         .quad   0x04
0x038: 0900000000000000     |         .quad   0x09
0x040: 0a00000000000000     |         .quad   0x0A
                            | 
0x048:                      | main:
0x048: 30f72000000000000000 |         irmovq  array, %rdi
0x052: 30f01800000000000000 |         irmovq  count, %rax
0x05c: 50600000000000000000 |         mrmovq  (%rax), %rsi
0x066: 807000000000000000   |         call    check
0x06f: 90                   |         ret
                            | 
                            | # int check(long *data, long count)
                            | # data in %rdi, count in %rsi
0x070:                      | check:
0x070: 30f80800000000000000 |         irmovq  $8, %r8         # constant 8
0x07a: 30f90100000000000000 |         irmovq  $1, %r9         # constant 1
0x084: 2062                 |         rrmovq  %rsi, %rdx
0x086: 6192                 |         subq    %r9, %rdx       # count - 1
0x088: 30f00000000000000000 |         irmovq  $0, %rax        # initialize i
0x092:                      | loop:
0x092: 2021                 |         rrmovq  %rdx, %rcx
0x094: 6101                 |         subq    %rax, %rcx      # count - 1 - i
0x096: 71cb00000000000000   |         jle     good            # i >= count - 1
0x09f: 50c70800000000000000 |         mrmovq  0x8(%rdi), %r12 # a[i + 1]
0x0a9: 50170000000000000000 |         mrmovq  (%rdi), %rcx    # a[i]
0x0b3: 61c1                 |         subq    %r12, %rcx      # a[i] - a[i + 1]
0x0b5: 76d600000000000000   |         jg      bad             # a[i] > a[i + 1]
0x0be: 6090                 |         addq    %r9, %rax       # ++i
0x0c0: 6087                 |         addq    %r8, %rdi       # ++a
0x0c2: 709200000000000000   |         jmp     loop            # next iteration
0x0cb:                      | good:
0x0cb: 30f00100000000000000 |         irmovq  $1, %rax        # a[i] < a[i + 1] for all i's: return true
0x0d5: 90                   |         ret
0x0d6:                      | bad:
0x0d6: 30f00000000000000000 |         irmovq  $0, %rax        # a[i] > a[i + 1] for some i: return false
0x0e0: 90                   |         ret
                            | 
                            | # stack starts here
0xff8:                      |         .pos    0xFF8
0xff8:                      | stack:
