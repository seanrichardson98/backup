# begin execution at address zero
        .pos    0
        irmovq  stack, %rsp     # set stack to 0xFF8, grow to lower addresses
        call    main            # start main
        halt                    # done

# set up array, length, followed by data
        .align  8
count:
        .quad   0x0A
array:
        .quad   0x0FFF
        .quad   0x0F20
        .quad   0xFFFFFFFFFFFFFF45
        .quad   0xFFFFFFFFFFFFFFFF
        .quad   0x01
        .quad   0x03
        .quad   0x04
        .quad   0x0A
        .quad   0x09
        .quad   0x11

main:
        irmovq  array, %rdi
        irmovq  count, %rax
        mrmovq  (%rax), %rsi
        call    sort
        ret

# void sort(long *data, long count)
# data in %rdi, count in %rsi
# %rdi .... data
# %rsi .... count
# %rcx .... last
# %rbx .... i
# %r8 ..... 8
# %r9 ..... 1
# r10 ..... test
sort:
        #setup
        irmovq $8, %r8
        irmovq $1, %r9
        rrmovq %rsi, %rcx 
        subq %r9, %rcx #last = count-1
        irmovq $0, %rbx # i = 0
        #test
loop_i:
        rrmovq %rbx, %r11
        addq %r11, %r11
        addq %r11, %r11
        addq %r11, %r11
        addq %rdi, %r11 #get address
        mrmovq (%r11), %r12
        mrmovq 8(%r11), %r13 #get mem for compare
        subq %r12, %r13 #set CC
        jge pass #skip if in right order
        mrmovq 8(%r11), %r13
        rmmovq %r12, 8(%r11)
        rmmovq %r13, (%r11)
pass:
        addq %r9, %rbx
        rrmovq %rbx, %r11
        subq %rcx, %r11
        jl loop_i #inner loop go back
        irmovq $0, %rbx #reset outer loop
        subq %r9, %rcx
        irmovq $0, %r11
        subq %rcx, %r11
        jl loop_i
        
        

        ret

# stack starts here
        .pos    0xFF8
stack:
