                            | # begin execution at address zero
0x000:                      |         .pos    0
0x000: 30f4f80f000000000000 |         irmovq  stack, %rsp     # set stack to 0xFF8, grow to lower addresses
0x00a: 807000000000000000   |         call    main            # start main
0x013: 00                   |         halt                    # done
                            | 
                            | # set up array, length, followed by data
0x018:                      |         .align  8
0x018:                      | count:
0x018: 0a00000000000000     |         .quad   0x0A
0x020:                      | array:
0x020: ff0f000000000000     |         .quad   0x0FFF
0x028: 200f000000000000     |         .quad   0x0F20
0x030: 45ffffffffffffff     |         .quad   0xFFFFFFFFFFFFFF45
0x038: ffffffffffffffff     |         .quad   0xFFFFFFFFFFFFFFFF
0x040: 0100000000000000     |         .quad   0x01
0x048: 0300000000000000     |         .quad   0x03
0x050: 0400000000000000     |         .quad   0x04
0x058: 0a00000000000000     |         .quad   0x0A
0x060: 0900000000000000     |         .quad   0x09
0x068: 1100000000000000     |         .quad   0x11
                            | 
0x070:                      | main:
0x070: 30f72000000000000000 |         irmovq  array, %rdi
0x07a: 30f01800000000000000 |         irmovq  count, %rax
0x084: 50600000000000000000 |         mrmovq  (%rax), %rsi
0x08e: 809800000000000000   |         call    sort
0x097: 90                   |         ret
                            | 
                            | # void sort(long *data, long count)
                            | # data in %rdi, count in %rsi
                            | # %rdi .... data
                            | # %rsi .... count
                            | # %rcx .... last
                            | # %rbx .... i
                            | # %r8 ..... 8
                            | # %r9 ..... 1
                            | # r10 ..... test
0x098:                      | sort:
                            |         #setup
0x098: 30f80800000000000000 |         irmovq $8, %r8
0x0a2: 30f90100000000000000 |         irmovq $1, %r9
0x0ac: 2061                 |         rrmovq %rsi, %rcx 
0x0ae: 6191                 |         subq %r9, %rcx #last = count-1
0x0b0: 30f30000000000000000 |         irmovq $0, %rbx # i = 0
                            |         #test
0x0ba:                      | loop_i:
0x0ba: 203b                 |         rrmovq %rbx, %r11
0x0bc: 60bb                 |         addq %r11, %r11
0x0be: 60bb                 |         addq %r11, %r11
0x0c0: 60bb                 |         addq %r11, %r11
0x0c2: 607b                 |         addq %rdi, %r11 #get address
0x0c4: 50cb0000000000000000 |         mrmovq (%r11), %r12
0x0ce: 50db0800000000000000 |         mrmovq 8(%r11), %r13 #get mem for compare
0x0d8: 61cd                 |         subq %r12, %r13 #set CC
0x0da: 750101000000000000   |         jge pass #skip if in right order
0x0e3: 50db0800000000000000 |         mrmovq 8(%r11), %r13
0x0ed: 40cb0800000000000000 |         rmmovq %r12, 8(%r11)
0x0f7: 40db0000000000000000 |         rmmovq %r13, (%r11)
0x101:                      | pass:
0x101: 6093                 |         addq %r9, %rbx
0x103: 203b                 |         rrmovq %rbx, %r11
0x105: 611b                 |         subq %rcx, %r11
0x107: 72ba00000000000000   |         jl loop_i #inner loop go back
0x110: 30f30000000000000000 |         irmovq $0, %rbx #reset outer loop
0x11a: 6191                 |         subq %r9, %rcx
0x11c: 30fb0000000000000000 |         irmovq $0, %r11
0x126: 611b                 |         subq %rcx, %r11
0x128: 72ba00000000000000   |         jl loop_i
                            |         
                            |         
                            | 
0x131: 90                   |         ret
                            | 
                            | # stack starts here
0xff8:                      |         .pos    0xFF8
0xff8:                      | stack:
